@model InventoryOrder.ViewModel.OrderViewModel

<div class="invoice-container">
    <h2>@localizer["Create Order"]</h2>

    <form id="create-order-form" method="post" asp-action="Create">
        <div class="order-details">
            <div class="form-group">
                <label for="CustomerID">@localizer["Customer "]</label>
                @Html.DropDownListFor(m => m.Order.CustomerID, ViewBag.Customers as SelectList, localizer["Select a Customer"].ToString(), new { @class = "form-control" })
            </div>

            <div class="form-group">
                <label for="WarehouseID">@localizer["Warehouse "]</label>
                @Html.DropDownListFor(m => m.Order.WarehouseID, ViewBag.Warehouses as SelectList, localizer["Select a Warehouse"].ToString(), new { @class = "form-control" })
            </div>
        </div>

        <div id="products-section" class="product-section">
            <h3>@localizer["Product"]</h3>
            <table class="product-table table">
                <thead>
                    <tr>
                        <th>@localizer["Product"]</th>
                        <th>@localizer["Quantity"]</th>
                        <th>@localizer["Price"]</th>
                        <th>@localizer["Total Price"]</th>
                        <th>@localizer["Actions"]</th>
                    </tr>
                </thead>
                <tbody id="product-list">
                    @for (int i = 0; i < Model.OrderDetails.Count; i++)
                    {
                        <tr class="product-item">
                            <td>
                                @Html.DropDownListFor(m => m.OrderDetails[i].ProductID,
                                         new SelectList(ViewBag.Products, "Value", "Text"),
                                         localizer["Select a Product"].ToString(),
                                         new { @class = "product-select form-control" })
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.OrderDetails[i].Quantity, new { @class = "product-quantity form-control", type = "number", min = "1" })
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.OrderDetails[i].Price, new { @class = "product-price form-control", type = "number", step = "0.01" })
                            </td>
                            <td>
                                <span class="product-total-price">@((Model.OrderDetails[i].Price * Model.OrderDetails[i].Quantity).ToString("F2"))</span>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger delete-product-button" onclick="confirmDelete(event)">@localizer["Delete"]</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" id="add-product-button" class="btn btn-primary">@localizer["Add Product"]</button>
        </div>

        <div class="order-total">
            <label>@localizer["Total Order Price"]:</label>
            <span id="total-order-price">@Model.OrderDetails.Sum(od => od.Price * od.Quantity).ToString("F2")</span>
        </div>

        <button type="submit" class="btn btn-success">@localizer["Create Order"]</button>
    </form>
</div>

<script id="product-template" type="text/x-handlebars-template">
    <tr class="product-item">
        <td>
    @Html.DropDownList("OrderDetails[{{index}}].ProductID",
                                    new SelectList(ViewBag.Products, "Value", "Text"),
                                    localizer["Select a Product"].ToString(),
                                    new { @class = "product-select form-control" })
        </td>
        <td>
            <input type="number" class="product-quantity form-control" name="OrderDetails[{{index}}].Quantity" min="1" value="1">
        </td>
        <td>
            <input type="number" class="product-price form-control" name="OrderDetails[{{index}}].Price" step="0.01" value="0.00">
        </td>
        <td>
            <span class="product-total-price">0.00</span>
        </td>
        <td>
            <button type="button" class="btn btn-danger delete-product-button" onclick="confirmDelete(event)">@localizer["Delete"]</button>
        </td>
    </tr>
</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        let productIndex = @Model.OrderDetails.Count;

        const addProductButton = document.getElementById("add-product-button");
        const productTemplate = document.getElementById("product-template").innerHTML;
        const productList = document.getElementById("product-list");
        const totalOrderPrice = document.getElementById("total-order-price");

        addProductButton.addEventListener("click", function () {
            const productHTML = productTemplate.replace(/{{index}}/g, productIndex);
            productList.insertAdjacentHTML('beforeend', productHTML);
            productIndex++;
            updateTotalOrderPrice();
        });

        productList.addEventListener("input", function (event) {
            if (event.target.classList.contains("product-quantity") || event.target.classList.contains("product-price")) {
                const productItem = event.target.closest(".product-item");
                const quantity = productItem.querySelector(".product-quantity").value;
                const price = productItem.querySelector(".product-price").value;
                const totalPrice = (quantity * price).toFixed(2);
                productItem.querySelector(".product-total-price").textContent = totalPrice;
                updateTotalOrderPrice();
            }
        });

        productList.addEventListener("click", function (event) {
            if (event.target.classList.contains("delete-product-button")) {
                confirmDelete(event);
                if (!event.defaultPrevented) {
                    const productItem = event.target.closest(".product-item");
                    productItem.remove();
                    updateTotalOrderPrice();
                }
            }
        });

        function confirmDelete(event) {
            const confirmDelete = window.confirm("@localizer/['Are you sure you want to delete this product?']".ToString());
            if (!confirmDelete) {
                event.preventDefault();
            }
        }

        function updateTotalOrderPrice() {
            let total = 0;
            document.querySelectorAll(".product-total-price").forEach(function (priceElement) {
                total += parseFloat(priceElement.textContent);
            });
            totalOrderPrice.textContent = total.toFixed(2);
        }
    });
</script>

          